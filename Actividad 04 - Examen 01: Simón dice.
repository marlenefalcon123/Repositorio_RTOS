#include <Arduino.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>

#if CONFIG_FREERTOS_UNICORE
  static const BaseType_t app_cpu = 0;
#else
  static const BaseType_t app_cpu = 1;
#endif

// lCD de 16*2
LiquidCrystal_I2C lcd(0x27, 16, 2); 

// Para teclado matricial 4*4
const byte FILAS = 4;
const byte COLUMNAS = 4;
char keys[FILAS][COLUMNAS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte FilaPin[FILAS] = {1, 42, 41, 40}; 
byte colPin[COLUMNAS] = {39, 38, 37, 36};
Keypad keypad = Keypad(makeKeymap(keys), FilaPin, colPin, FILAS, COLUMNAS);

// Variables del juego
#define Max_Niveles 30 // Niveles del juego
char sequence[Max_Niveles]; 
int Nivel = 1;

// Semaforos para poder sincronizar las tareas
static SemaphoreHandle_t sem_show_done;
static SemaphoreHandle_t sem_input_done;


// Mostrar la secuencia en la pantalla
void enseñarSecuencia(void *parameter) {
  while (1) {
    // Esperar turno
    xSemaphoreTake(sem_input_done, portMAX_DELAY);

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Secuencia:");
    vTaskDelay(800 / portTICK_PERIOD_MS);

    // Esta parte muestra los pasos según el nivel en el que te encuentres.
    for (int i = 0; i < Nivel; i++) {
      lcd.clear();
      lcd.setCursor(7, 1);
      lcd.print(sequence[i]);
      vTaskDelay(600 / portTICK_PERIOD_MS);
      lcd.clear();
      vTaskDelay(250 / portTICK_PERIOD_MS);
    }

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Ingresa"); 
    xSemaphoreGive(sem_show_done);// Da paso al jugador
  }
}

// Tarea que lee lo que el jugador mete en el teclado
void LeerEntrada(void *parameter) {
  char key;

  while (1) {

    // espera a que se haya mostrado la secuencia 
    xSemaphoreTake(sem_show_done, portMAX_DELAY);

    bool Correcto = true; // Si el jugador acierta

    for (int i = 0; i < Nivel; i++) {
      // Aqu+i espera a que se presione una tecla válida
      do {
        key = keypad.getKey();
        vTaskDelay(10 / portTICK_PERIOD_MS);
      } while (!key);

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Presionado:");
      lcd.setCursor(12, 0);
      lcd.print(key);

      // En esta parte se comprueba si coincide o no la tecla ingresada
      if (key != sequence[i]) {
        Correcto = false;
        break;
      }

      vTaskDelay(300 / portTICK_PERIOD_MS);
    }

    // Si es correcto pasamos al siguiente nivel.
    if (Correcto) {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Siguiente nivel");
      vTaskDelay(800 / portTICK_PERIOD_MS);
      Nivel++;

      // Si el nivel ya es el nivel máximo, lo limita
      if (Nivel > Max_Niveles) Nivel = Max_Niveles;
    } else {
      // Esta parte es si el jugador pierde, indica que perdiste
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Perdiste!");
      vTaskDelay(1000 / portTICK_PERIOD_MS);
      Nivel = 1;
      // Reinicia la secuencia ya que se equivocaron.
      for (int i = 0; i < Max_Niveles; i++) {
        int r = random(0, 16); // 16 teclas posibles
        sequence[i] = keys[r / 4][r % 4];
      }
    }

    xSemaphoreGive(sem_input_done);
  }
}

// Setup
void setup() {
  Serial.begin(115200);

  // Inicializa I2C en los pines Correctoos
  Wire.begin(20, 21); 

  lcd.init();
  lcd.backlight();

  randomSeed(analogRead(0));

  // Crea primera secuencia aleatoria con todas las teclas
  for (int i = 0; i < Max_Niveles; i++) {
    int r = random(0, 16); 
    sequence[i] = keys[r / 4][r % 4];
  }

  // Crear semáforos
  sem_show_done = xSemaphoreCreateBinary();
  sem_input_done = xSemaphoreCreateBinary();

  // Iniciar el juego dando el primer turno
  xSemaphoreGive(sem_input_done);

  // Creación de tareas
  xTaskCreatePinnedToCore(enseñarSecuencia, 
                          "MostrarSecuencia", 
                          2048, 
                          NULL, 
                          1, 
                          NULL, 
                          app_cpu);

  xTaskCreatePinnedToCore(LeerEntrada, 
                          "LeerTeclado", 
                          4096, 
                          NULL, 
                          1, 
                          NULL, 
                          app_cpu);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Simon Dice");
  vTaskDelay(1000 / portTICK_PERIOD_MS);
}

 // Loop vacio porque es con RTOS
void loop() {
  vTaskDelay(1000 / portTICK_PERIOD_MS);
}
